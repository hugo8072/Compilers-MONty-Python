# Generated from MontyPythonLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if "." in __name__:
    from .MontyPythonLexerBase import MontyPythonLexerBase
else:
    from MontyPythonLexerBase import MontyPythonLexerBase

def serializedATN():
    return [
        4,0,70,408,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
        2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,
        10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
        16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,
        23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,
        29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,
        36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
        42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
        49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,
        55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,
        20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,
        26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,
        31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,
        34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,
        39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,
        41,1,42,1,42,3,42,288,8,42,1,43,3,43,291,8,43,1,43,5,43,294,8,43,
        10,43,12,43,297,9,43,1,44,3,44,300,8,44,1,44,1,44,1,45,4,45,305,
        8,45,11,45,12,45,306,1,45,5,45,310,8,45,10,45,12,45,313,9,45,1,45,
        1,45,1,46,4,46,318,8,46,11,46,12,46,319,1,46,1,46,1,47,1,47,1,47,
        1,47,1,47,1,48,4,48,330,8,48,11,48,12,48,331,1,49,4,49,335,8,49,
        11,49,12,49,336,1,49,1,49,5,49,341,8,49,10,49,12,49,344,9,49,3,49,
        346,8,49,1,49,1,49,3,49,350,8,49,1,49,4,49,353,8,49,11,49,12,49,
        354,1,49,4,49,358,8,49,11,49,12,49,359,1,49,3,49,363,8,49,1,49,5,
        49,366,8,49,10,49,12,49,369,9,49,3,49,371,8,49,1,50,1,50,1,50,1,
        50,1,50,3,50,378,8,50,1,50,1,50,1,51,1,51,3,51,384,8,51,1,52,1,52,
        1,53,1,53,5,53,390,8,53,10,53,12,53,393,9,53,1,53,1,53,1,54,1,54,
        1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,391,0,60,7,11,
        9,12,11,13,13,14,15,15,17,16,19,17,21,18,23,19,25,20,27,21,29,22,
        31,23,33,24,35,25,37,26,39,27,41,28,43,29,45,30,47,31,49,32,51,33,
        53,34,55,35,57,36,59,37,61,38,63,39,65,40,67,41,69,42,71,43,73,44,
        75,45,77,46,79,47,81,48,83,49,85,50,87,51,89,52,91,53,93,54,95,55,
        97,56,99,57,101,58,103,59,105,60,107,61,109,62,111,63,113,64,115,
        65,117,66,119,67,121,68,123,69,125,70,7,0,1,2,3,4,5,6,7,2,0,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,9,12,12,
        32,32,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,421,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
        0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
        0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,2,
        117,1,0,0,0,3,119,1,0,0,0,4,121,1,0,0,0,5,123,1,0,0,0,6,125,1,0,
        0,0,7,127,1,0,0,0,9,132,1,0,0,0,11,138,1,0,0,0,13,147,1,0,0,0,15,
        153,1,0,0,0,17,158,1,0,0,0,19,161,1,0,0,0,21,165,1,0,0,0,23,168,
        1,0,0,0,25,174,1,0,0,0,27,180,1,0,0,0,29,186,1,0,0,0,31,188,1,0,
        0,0,33,190,1,0,0,0,35,192,1,0,0,0,37,194,1,0,0,0,39,196,1,0,0,0,
        41,198,1,0,0,0,43,200,1,0,0,0,45,203,1,0,0,0,47,205,1,0,0,0,49,208,
        1,0,0,0,51,210,1,0,0,0,53,212,1,0,0,0,55,214,1,0,0,0,57,216,1,0,
        0,0,59,219,1,0,0,0,61,222,1,0,0,0,63,225,1,0,0,0,65,228,1,0,0,0,
        67,230,1,0,0,0,69,232,1,0,0,0,71,236,1,0,0,0,73,239,1,0,0,0,75,243,
        1,0,0,0,77,247,1,0,0,0,79,252,1,0,0,0,81,259,1,0,0,0,83,266,1,0,
        0,0,85,270,1,0,0,0,87,275,1,0,0,0,89,279,1,0,0,0,91,287,1,0,0,0,
        93,290,1,0,0,0,95,299,1,0,0,0,97,304,1,0,0,0,99,317,1,0,0,0,101,
        323,1,0,0,0,103,329,1,0,0,0,105,370,1,0,0,0,107,372,1,0,0,0,109,
        383,1,0,0,0,111,385,1,0,0,0,113,387,1,0,0,0,115,396,1,0,0,0,117,
        398,1,0,0,0,119,400,1,0,0,0,121,402,1,0,0,0,123,404,1,0,0,0,125,
        406,1,0,0,0,127,128,5,101,0,0,128,129,5,108,0,0,129,130,5,115,0,
        0,130,131,5,101,0,0,131,8,1,0,0,0,132,133,5,98,0,0,133,134,5,114,
        0,0,134,135,5,101,0,0,135,136,5,97,0,0,136,137,5,107,0,0,137,10,
        1,0,0,0,138,139,5,99,0,0,139,140,5,111,0,0,140,141,5,110,0,0,141,
        142,5,116,0,0,142,143,5,105,0,0,143,144,5,110,0,0,144,145,5,117,
        0,0,145,146,5,101,0,0,146,12,1,0,0,0,147,148,5,119,0,0,148,149,5,
        104,0,0,149,150,5,105,0,0,150,151,5,108,0,0,151,152,5,101,0,0,152,
        14,1,0,0,0,153,154,5,101,0,0,154,155,5,108,0,0,155,156,5,105,0,0,
        156,157,5,102,0,0,157,16,1,0,0,0,158,159,5,105,0,0,159,160,5,102,
        0,0,160,18,1,0,0,0,161,162,5,102,0,0,162,163,5,111,0,0,163,164,5,
        114,0,0,164,20,1,0,0,0,165,166,5,105,0,0,166,167,5,110,0,0,167,22,
        1,0,0,0,168,169,5,114,0,0,169,170,5,97,0,0,170,171,5,110,0,0,171,
        172,5,103,0,0,172,173,5,101,0,0,173,24,1,0,0,0,174,175,5,112,0,0,
        175,176,5,114,0,0,176,177,5,105,0,0,177,178,5,110,0,0,178,179,5,
        116,0,0,179,26,1,0,0,0,180,181,5,105,0,0,181,182,5,110,0,0,182,183,
        5,112,0,0,183,184,5,117,0,0,184,185,5,116,0,0,185,28,1,0,0,0,186,
        187,5,40,0,0,187,30,1,0,0,0,188,189,5,41,0,0,189,32,1,0,0,0,190,
        191,5,58,0,0,191,34,1,0,0,0,192,193,5,43,0,0,193,36,1,0,0,0,194,
        195,5,45,0,0,195,38,1,0,0,0,196,197,5,42,0,0,197,40,1,0,0,0,198,
        199,5,47,0,0,199,42,1,0,0,0,200,201,5,47,0,0,201,202,5,47,0,0,202,
        44,1,0,0,0,203,204,5,37,0,0,204,46,1,0,0,0,205,206,5,42,0,0,206,
        207,5,42,0,0,207,48,1,0,0,0,208,209,5,60,0,0,209,50,1,0,0,0,210,
        211,5,62,0,0,211,52,1,0,0,0,212,213,5,61,0,0,213,54,1,0,0,0,214,
        215,5,44,0,0,215,56,1,0,0,0,216,217,5,61,0,0,217,218,5,61,0,0,218,
        58,1,0,0,0,219,220,5,33,0,0,220,221,5,61,0,0,221,60,1,0,0,0,222,
        223,5,60,0,0,223,224,5,61,0,0,224,62,1,0,0,0,225,226,5,62,0,0,226,
        227,5,61,0,0,227,64,1,0,0,0,228,229,5,91,0,0,229,66,1,0,0,0,230,
        231,5,93,0,0,231,68,1,0,0,0,232,233,5,97,0,0,233,234,5,110,0,0,234,
        235,5,100,0,0,235,70,1,0,0,0,236,237,5,111,0,0,237,238,5,114,0,0,
        238,72,1,0,0,0,239,240,5,110,0,0,240,241,5,111,0,0,241,242,5,116,
        0,0,242,74,1,0,0,0,243,244,5,97,0,0,244,245,5,100,0,0,245,246,5,
        100,0,0,246,76,1,0,0,0,247,248,5,115,0,0,248,249,5,105,0,0,249,250,
        5,122,0,0,250,251,5,101,0,0,251,78,1,0,0,0,252,253,5,114,0,0,253,
        254,5,101,0,0,254,255,5,109,0,0,255,256,5,111,0,0,256,257,5,118,
        0,0,257,258,5,101,0,0,258,80,1,0,0,0,259,260,5,114,0,0,260,261,5,
        101,0,0,261,262,5,116,0,0,262,263,5,117,0,0,263,264,5,114,0,0,264,
        265,5,110,0,0,265,82,1,0,0,0,266,267,5,100,0,0,267,268,5,101,0,0,
        268,269,5,102,0,0,269,84,1,0,0,0,270,271,5,102,0,0,271,272,5,117,
        0,0,272,273,5,110,0,0,273,274,5,99,0,0,274,86,1,0,0,0,275,276,5,
        105,0,0,276,277,5,110,0,0,277,278,5,116,0,0,278,88,1,0,0,0,279,280,
        5,102,0,0,280,281,5,108,0,0,281,282,5,111,0,0,282,283,5,97,0,0,283,
        284,5,116,0,0,284,90,1,0,0,0,285,288,3,87,40,0,286,288,3,89,41,0,
        287,285,1,0,0,0,287,286,1,0,0,0,288,92,1,0,0,0,289,291,7,0,0,0,290,
        289,1,0,0,0,291,295,1,0,0,0,292,294,7,1,0,0,293,292,1,0,0,0,294,
        297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,94,1,0,0,0,297,295,
        1,0,0,0,298,300,5,13,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,
        1,0,0,0,301,302,5,10,0,0,302,96,1,0,0,0,303,305,5,35,0,0,304,303,
        1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,311,
        1,0,0,0,308,310,8,2,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,
        1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,
        6,45,0,0,315,98,1,0,0,0,316,318,7,3,0,0,317,316,1,0,0,0,318,319,
        1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,
        6,46,0,0,322,100,1,0,0,0,323,324,5,92,0,0,324,325,3,95,44,0,325,
        326,1,0,0,0,326,327,6,47,0,0,327,102,1,0,0,0,328,330,7,4,0,0,329,
        328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,
        104,1,0,0,0,333,335,7,4,0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,
        334,1,0,0,0,336,337,1,0,0,0,337,345,1,0,0,0,338,342,5,46,0,0,339,
        341,7,4,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,
        343,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,345,338,1,0,0,0,345,
        346,1,0,0,0,346,347,1,0,0,0,347,349,7,5,0,0,348,350,7,6,0,0,349,
        348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,353,7,4,0,0,352,
        351,1,0,0,0,353,354,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,
        371,1,0,0,0,356,358,7,4,0,0,357,356,1,0,0,0,358,359,1,0,0,0,359,
        357,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,363,5,46,0,0,362,
        361,1,0,0,0,362,363,1,0,0,0,363,367,1,0,0,0,364,366,7,4,0,0,365,
        364,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,
        371,1,0,0,0,369,367,1,0,0,0,370,334,1,0,0,0,370,357,1,0,0,0,371,
        106,1,0,0,0,372,373,3,93,43,0,373,377,3,65,29,0,374,378,3,103,48,
        0,375,378,3,105,49,0,376,378,3,93,43,0,377,374,1,0,0,0,377,375,1,
        0,0,0,377,376,1,0,0,0,378,379,1,0,0,0,379,380,3,67,30,0,380,108,
        1,0,0,0,381,384,3,103,48,0,382,384,3,105,49,0,383,381,1,0,0,0,383,
        382,1,0,0,0,384,110,1,0,0,0,385,386,9,0,0,0,386,112,1,0,0,0,387,
        391,5,34,0,0,388,390,9,0,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,
        392,1,0,0,0,391,389,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,
        395,5,34,0,0,395,114,1,0,0,0,396,397,9,0,0,0,397,116,1,0,0,0,398,
        399,9,0,0,0,399,118,1,0,0,0,400,401,9,0,0,0,401,120,1,0,0,0,402,
        403,9,0,0,0,403,122,1,0,0,0,404,405,9,0,0,0,405,124,1,0,0,0,406,
        407,9,0,0,0,407,126,1,0,0,0,28,0,1,2,3,4,5,6,287,290,293,295,299,
        306,311,319,331,336,342,345,349,354,359,362,367,370,377,383,391,
        1,0,1,0
    ]

class MontyPythonLexer(MontyPythonLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SINGLE_QUOTE_FSTRING_MODE = 1
    DOUBLE_QUOTE_FSTRING_MODE = 2
    LONG_SINGLE_QUOTE_FSTRING_MODE = 3
    LONG_DOUBLE_QUOTE_FSTRING_MODE = 4
    SINGLE_QUOTE_FORMAT_SPECIFICATION_MODE = 5
    DOUBLE_QUOTE_FORMAT_SPECIFICATION_MODE = 6

    LSQB = 1
    RSQB = 2
    LBRACE = 3
    RBRACE = 4
    TYPE_COMMENT = 5
    FSTRING_START = 6
    FSTRING_MIDDLE = 7
    FSTRING_END = 8
    INDENT = 9
    DEDENT = 10
    ELSE = 11
    BREAK = 12
    CONTINUE = 13
    WHILE = 14
    ELIF = 15
    IF = 16
    FOR = 17
    IN = 18
    RANGE = 19
    PRINT = 20
    INPUT = 21
    LPAR = 22
    RPAR = 23
    COLON = 24
    PLUS = 25
    MINUS = 26
    TIMES = 27
    DIVIDE = 28
    FLOOR_DIVIDE = 29
    MODULO = 30
    EXPONENT = 31
    LESS = 32
    GREATER = 33
    EQUAL = 34
    COMMA = 35
    EQEQUAL = 36
    NOTEQUAL = 37
    LESSEQUAL = 38
    GREATEREQUAL = 39
    LEFT_BRACKET = 40
    RIGHT_BRACKET = 41
    AND = 42
    OR = 43
    NOT = 44
    L_ADD = 45
    L_SIZE = 46
    L_REMOVE = 47
    RETURN = 48
    DEF = 49
    FUNCTION_DEF = 50
    TYPE_INT = 51
    TYPE_FLOAT = 52
    TYPE_NUMBER = 53
    NAME = 54
    NEWLINE = 55
    COMMENT = 56
    WS = 57
    EXPLICIT_LINE_JOINING = 58
    INT = 59
    FLOAT = 60
    LIST_VALUE = 61
    NUMBER = 62
    ERRORTOKEN = 63
    STRING = 64
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "SINGLE_QUOTE_FSTRING_MODE", "DOUBLE_QUOTE_FSTRING_MODE", 
                  "LONG_SINGLE_QUOTE_FSTRING_MODE", "LONG_DOUBLE_QUOTE_FSTRING_MODE", 
                  "SINGLE_QUOTE_FORMAT_SPECIFICATION_MODE", "DOUBLE_QUOTE_FORMAT_SPECIFICATION_MODE" ]

    literalNames = [ "<INVALID>",
            "'else'", "'break'", "'continue'", "'while'", "'elif'", "'if'", 
            "'for'", "'in'", "'range'", "'print'", "'input'", "'('", "')'", 
            "':'", "'+'", "'-'", "'*'", "'/'", "'//'", "'%'", "'**'", "'<'", 
            "'>'", "'='", "','", "'=='", "'!='", "'<='", "'>='", "'['", 
            "']'", "'and'", "'or'", "'not'", "'add'", "'size'", "'remove'", 
            "'return'", "'def'", "'func'", "'int'", "'float'" ]

    symbolicNames = [ "<INVALID>",
            "LSQB", "RSQB", "LBRACE", "RBRACE", "TYPE_COMMENT", "FSTRING_START", 
            "FSTRING_MIDDLE", "FSTRING_END", "INDENT", "DEDENT", "ELSE", 
            "BREAK", "CONTINUE", "WHILE", "ELIF", "IF", "FOR", "IN", "RANGE", 
            "PRINT", "INPUT", "LPAR", "RPAR", "COLON", "PLUS", "MINUS", 
            "TIMES", "DIVIDE", "FLOOR_DIVIDE", "MODULO", "EXPONENT", "LESS", 
            "GREATER", "EQUAL", "COMMA", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", 
            "GREATEREQUAL", "LEFT_BRACKET", "RIGHT_BRACKET", "AND", "OR", 
            "NOT", "L_ADD", "L_SIZE", "L_REMOVE", "RETURN", "DEF", "FUNCTION_DEF", 
            "TYPE_INT", "TYPE_FLOAT", "TYPE_NUMBER", "NAME", "NEWLINE", 
            "COMMENT", "WS", "EXPLICIT_LINE_JOINING", "INT", "FLOAT", "LIST_VALUE", 
            "NUMBER", "ERRORTOKEN", "STRING", "A", "B", "C", "D", "E", "F" ]

    ruleNames = [ "ELSE", "BREAK", "CONTINUE", "WHILE", "ELIF", "IF", "FOR", 
                  "IN", "RANGE", "PRINT", "INPUT", "LPAR", "RPAR", "COLON", 
                  "PLUS", "MINUS", "TIMES", "DIVIDE", "FLOOR_DIVIDE", "MODULO", 
                  "EXPONENT", "LESS", "GREATER", "EQUAL", "COMMA", "EQEQUAL", 
                  "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "LEFT_BRACKET", 
                  "RIGHT_BRACKET", "AND", "OR", "NOT", "L_ADD", "L_SIZE", 
                  "L_REMOVE", "RETURN", "DEF", "FUNCTION_DEF", "TYPE_INT", 
                  "TYPE_FLOAT", "TYPE_NUMBER", "NAME", "NEWLINE", "COMMENT", 
                  "WS", "EXPLICIT_LINE_JOINING", "INT", "FLOAT", "LIST_VALUE", 
                  "NUMBER", "ERRORTOKEN", "STRING", "A", "B", "C", "D", 
                  "E", "F" ]

    grammarFileName = "MontyPythonLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


